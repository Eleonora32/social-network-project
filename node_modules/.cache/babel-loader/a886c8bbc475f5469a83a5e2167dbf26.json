{"ast":null,"code":"import { ADD_NEW_PERSON, CHANGE_ACTIVE_PERSON, DELETE_PERSON, EDIT_PERSON, FETCH_PERSONS, SET_PERSON_BY_ID } from \"../typesList\";\nimport personsInitial, { activePersonId, setActivePersonIdToStorage, setPersonsToStorage } from \"../../data/persons\";\nexport const changeActivePersonId = personId => {\n  return dispatch => {\n    try {\n      setActivePersonIdToStorage(personId);\n      dispatch(setActivePerson(personId));\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n};\nexport const getPersons = () => {\n  return dispatch => {\n    try {\n      const obj = getObj();\n      dispatch(fetchPersons(obj));\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n};\nexport const addNewPerson = data => {\n  return async dispatch => {\n    try {\n      const person = await createPerson(data);\n      await dispatch(addPerson(person));\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n};\nexport const deletePerson = personId => {\n  return async dispatch => {\n    try {\n      await deleteFromServer(personId);\n      await dispatch(deletePersonFromState(personId));\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n};\nexport const editPerson = person => {\n  return async dispatch => {\n    try {\n      await editPersonInServer(person);\n      await dispatch(editPersonInState(person));\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n};\nexport const setPersonById = personId => {\n  return dispatch => {\n    try {\n      dispatch(setPersonByIdInState(personId));\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n};\n\nconst setPersonByIdInState = personId => {\n  return {\n    type: SET_PERSON_BY_ID,\n    payload: personId\n  };\n};\n\nconst setActivePerson = personId => {\n  return {\n    type: CHANGE_ACTIVE_PERSON,\n    payload: personId\n  };\n};\n\nconst fetchPersons = obj => {\n  return {\n    type: FETCH_PERSONS,\n    payload: obj\n  };\n};\n\nconst addPerson = person => {\n  return {\n    type: ADD_NEW_PERSON,\n    payload: person\n  };\n};\n\nconst editPersonInState = person => {\n  return {\n    type: EDIT_PERSON,\n    payload: person\n  };\n};\n\nconst deletePersonFromState = personId => {\n  return {\n    type: DELETE_PERSON,\n    payload: personId\n  };\n}; // Server emulations\n\n\nconst createPerson = data => {\n  const newPerson = { ...data,\n    id: Date.now()\n  };\n  const persons = personsInitial;\n  persons.push(newPerson);\n  setPersonsToStorage(persons);\n  return newPerson;\n};\n\nconst editPersonInServer = person => {\n  const idx = personsInitial.findIndex(p => p.id === person.id);\n  if (idx === -1) return null;\n  personsInitial.splice(idx, 1, person);\n  setPersonsToStorage(personsInitial);\n};\n\nconst getObj = () => {\n  return {\n    list: [...personsInitial],\n    activePerson: +activePersonId\n  };\n};\n\nconst deleteFromServer = personId => {\n  const idx = personsInitial.findIndex(p => p.id === personId);\n  if (idx === -1) return null;\n  personsInitial.splice(idx, 1);\n  setPersonsToStorage(personsInitial);\n};","map":{"version":3,"sources":["/Users/olegdubovoj/Documents/TEL-RAN/social-network-project/src/store/actions/persons.js"],"names":["ADD_NEW_PERSON","CHANGE_ACTIVE_PERSON","DELETE_PERSON","EDIT_PERSON","FETCH_PERSONS","SET_PERSON_BY_ID","personsInitial","activePersonId","setActivePersonIdToStorage","setPersonsToStorage","changeActivePersonId","personId","dispatch","setActivePerson","err","console","log","message","getPersons","obj","getObj","fetchPersons","e","addNewPerson","data","person","createPerson","addPerson","deletePerson","deleteFromServer","deletePersonFromState","editPerson","editPersonInServer","editPersonInState","setPersonById","setPersonByIdInState","type","payload","newPerson","id","Date","now","persons","push","idx","findIndex","p","splice","list","activePerson"],"mappings":"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","sourcesContent":["import {\n    ADD_NEW_PERSON,\n    CHANGE_ACTIVE_PERSON,\n    DELETE_PERSON,\n    EDIT_PERSON,\n    FETCH_PERSONS,\n    SET_PERSON_BY_ID\n} from \"../typesList\";\nimport personsInitial, {activePersonId, setActivePersonIdToStorage, setPersonsToStorage} from \"../../data/persons\";\n\nexport const changeActivePersonId = personId => {\n    return dispatch => {\n        try {\n            setActivePersonIdToStorage(personId)\n            dispatch(setActivePerson(personId))\n        } catch (err) {\n            console.log(err.message)\n        }\n\n    }\n}\n\nexport const getPersons = () => {\n    return dispatch => {\n        try {\n            const obj = getObj()\n            dispatch(fetchPersons(obj))\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n}\n\nexport const addNewPerson = data => {\n    return async dispatch => {\n        try {\n            const person = await createPerson(data)\n            await dispatch( addPerson(person) )\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n}\n\nexport const deletePerson = personId => {\n    return async dispatch => {\n        try {\n            await deleteFromServer(personId)\n            await dispatch( deletePersonFromState(personId) )\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n}\n\nexport const editPerson = person => {\n    return async dispatch => {\n        try {\n            await editPersonInServer(person)\n            await dispatch(editPersonInState(person))\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n}\n\nexport const setPersonById = personId => {\n    return dispatch => {\n        try {\n            dispatch( setPersonByIdInState(personId) )\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n}\n\nconst setPersonByIdInState = personId => {\n    return {\n        type: SET_PERSON_BY_ID,\n        payload: personId\n    }\n}\n\nconst setActivePerson = personId => {\n    return {\n        type: CHANGE_ACTIVE_PERSON,\n        payload: personId\n    }\n}\n\nconst fetchPersons = obj => {\n    return {\n        type: FETCH_PERSONS,\n        payload: obj\n    }\n}\n\nconst addPerson = person => {\n    return {\n        type: ADD_NEW_PERSON,\n        payload: person\n    }\n}\n\nconst editPersonInState = person => {\n    return {\n        type: EDIT_PERSON,\n        payload: person\n    }\n}\n\n\n\nconst deletePersonFromState = personId => {\n    return {\n        type: DELETE_PERSON,\n        payload: personId\n    }\n}\n\n\n// Server emulations\n\n\nconst createPerson = data => {\n    const newPerson = {\n        ...data,\n        id: Date.now()\n    }\n    const persons = personsInitial\n    persons.push(newPerson)\n    setPersonsToStorage(persons)\n    return newPerson\n}\n\nconst editPersonInServer = person => {\n    const idx = personsInitial.findIndex(p=>p.id === person.id)\n    if (idx === -1) return null\n    personsInitial.splice(idx, 1, person)\n    setPersonsToStorage(personsInitial)\n}\n\nconst getObj = () => {\n    return {\n        list: [...personsInitial],\n        activePerson: +activePersonId\n    }\n}\n\nconst deleteFromServer = personId => {\n    const idx = personsInitial.findIndex(p=>p.id===personId)\n    if (idx === -1) return null\n    personsInitial.splice(idx,1)\n    setPersonsToStorage(personsInitial)\n}"]},"metadata":{},"sourceType":"module"}